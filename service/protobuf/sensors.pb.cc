// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensors.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sensors.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sensors {

namespace {

const ::google::protobuf::Descriptor* Cam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cam_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_sensors_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_sensors_2eproto() {
  protobuf_AddDesc_sensors_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sensors.proto");
  GOOGLE_CHECK(file != NULL);
  Cam_descriptor_ = file->message_type(0);
  static const int Cam_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cam, cols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cam, rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cam, image_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cam, timestamp_),
  };
  Cam_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Cam_descriptor_,
      Cam::default_instance_,
      Cam_offsets_,
      -1,
      -1,
      -1,
      sizeof(Cam),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cam, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cam, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sensors_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Cam_descriptor_, &Cam::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sensors_2eproto() {
  delete Cam::default_instance_;
  delete Cam_reflection_;
}

void protobuf_AddDesc_sensors_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_sensors_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rsensors.proto\022\007sensors\"H\n\003Cam\022\014\n\004cols\030"
    "\001 \001(\005\022\014\n\004rows\030\002 \001(\005\022\022\n\nimage_data\030\003 \001(\014\022"
    "\021\n\ttimestamp\030\004 \001(\001b\006proto3", 106);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sensors.proto", &protobuf_RegisterTypes);
  Cam::default_instance_ = new Cam();
  Cam::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sensors_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sensors_2eproto {
  StaticDescriptorInitializer_sensors_2eproto() {
    protobuf_AddDesc_sensors_2eproto();
  }
} static_descriptor_initializer_sensors_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Cam::kColsFieldNumber;
const int Cam::kRowsFieldNumber;
const int Cam::kImageDataFieldNumber;
const int Cam::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Cam::Cam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensors.Cam)
}

void Cam::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Cam::Cam(const Cam& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sensors.Cam)
}

void Cam::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cols_ = 0;
  rows_ = 0;
  image_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = 0;
}

Cam::~Cam() {
  // @@protoc_insertion_point(destructor:sensors.Cam)
  SharedDtor();
}

void Cam::SharedDtor() {
  image_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Cam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cam_descriptor_;
}

const Cam& Cam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sensors_2eproto();
  return *default_instance_;
}

Cam* Cam::default_instance_ = NULL;

Cam* Cam::New(::google::protobuf::Arena* arena) const {
  Cam* n = new Cam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Cam::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.Cam)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Cam, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Cam*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(cols_, rows_);
  image_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = 0;

#undef ZR_HELPER_
#undef ZR_

}

bool Cam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensors.Cam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cols = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cols_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rows;
        break;
      }

      // optional int32 rows = 2;
      case 2: {
        if (tag == 16) {
         parse_rows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rows_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_image_data;
        break;
      }

      // optional bytes image_data = 3;
      case 3: {
        if (tag == 26) {
         parse_image_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_image_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_timestamp;
        break;
      }

      // optional double timestamp = 4;
      case 4: {
        if (tag == 33) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensors.Cam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensors.Cam)
  return false;
#undef DO_
}

void Cam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensors.Cam)
  // optional int32 cols = 1;
  if (this->cols() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cols(), output);
  }

  // optional int32 rows = 2;
  if (this->rows() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rows(), output);
  }

  // optional bytes image_data = 3;
  if (this->image_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->image_data(), output);
  }

  // optional double timestamp = 4;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->timestamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:sensors.Cam)
}

::google::protobuf::uint8* Cam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.Cam)
  // optional int32 cols = 1;
  if (this->cols() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cols(), target);
  }

  // optional int32 rows = 2;
  if (this->rows() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rows(), target);
  }

  // optional bytes image_data = 3;
  if (this->image_data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->image_data(), target);
  }

  // optional double timestamp = 4;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->timestamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sensors.Cam)
  return target;
}

int Cam::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.Cam)
  int total_size = 0;

  // optional int32 cols = 1;
  if (this->cols() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cols());
  }

  // optional int32 rows = 2;
  if (this->rows() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rows());
  }

  // optional bytes image_data = 3;
  if (this->image_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->image_data());
  }

  // optional double timestamp = 4;
  if (this->timestamp() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.Cam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Cam* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Cam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.Cam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.Cam)
    MergeFrom(*source);
  }
}

void Cam::MergeFrom(const Cam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.Cam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.cols() != 0) {
    set_cols(from.cols());
  }
  if (from.rows() != 0) {
    set_rows(from.rows());
  }
  if (from.image_data().size() > 0) {

    image_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_data_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void Cam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.Cam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cam::CopyFrom(const Cam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.Cam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cam::IsInitialized() const {

  return true;
}

void Cam::Swap(Cam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Cam::InternalSwap(Cam* other) {
  std::swap(cols_, other->cols_);
  std::swap(rows_, other->rows_);
  image_data_.Swap(&other->image_data_);
  std::swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Cam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cam_descriptor_;
  metadata.reflection = Cam_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Cam

// optional int32 cols = 1;
void Cam::clear_cols() {
  cols_ = 0;
}
 ::google::protobuf::int32 Cam::cols() const {
  // @@protoc_insertion_point(field_get:sensors.Cam.cols)
  return cols_;
}
 void Cam::set_cols(::google::protobuf::int32 value) {
  
  cols_ = value;
  // @@protoc_insertion_point(field_set:sensors.Cam.cols)
}

// optional int32 rows = 2;
void Cam::clear_rows() {
  rows_ = 0;
}
 ::google::protobuf::int32 Cam::rows() const {
  // @@protoc_insertion_point(field_get:sensors.Cam.rows)
  return rows_;
}
 void Cam::set_rows(::google::protobuf::int32 value) {
  
  rows_ = value;
  // @@protoc_insertion_point(field_set:sensors.Cam.rows)
}

// optional bytes image_data = 3;
void Cam::clear_image_data() {
  image_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Cam::image_data() const {
  // @@protoc_insertion_point(field_get:sensors.Cam.image_data)
  return image_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Cam::set_image_data(const ::std::string& value) {
  
  image_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sensors.Cam.image_data)
}
 void Cam::set_image_data(const char* value) {
  
  image_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sensors.Cam.image_data)
}
 void Cam::set_image_data(const void* value, size_t size) {
  
  image_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sensors.Cam.image_data)
}
 ::std::string* Cam::mutable_image_data() {
  
  // @@protoc_insertion_point(field_mutable:sensors.Cam.image_data)
  return image_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Cam::release_image_data() {
  // @@protoc_insertion_point(field_release:sensors.Cam.image_data)
  
  return image_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Cam::set_allocated_image_data(::std::string* image_data) {
  if (image_data != NULL) {
    
  } else {
    
  }
  image_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_data);
  // @@protoc_insertion_point(field_set_allocated:sensors.Cam.image_data)
}

// optional double timestamp = 4;
void Cam::clear_timestamp() {
  timestamp_ = 0;
}
 double Cam::timestamp() const {
  // @@protoc_insertion_point(field_get:sensors.Cam.timestamp)
  return timestamp_;
}
 void Cam::set_timestamp(double value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:sensors.Cam.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace sensors

// @@protoc_insertion_point(global_scope)
