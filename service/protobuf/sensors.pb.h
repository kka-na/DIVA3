// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensors.proto

#ifndef PROTOBUF_sensors_2eproto__INCLUDED
#define PROTOBUF_sensors_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace sensors {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_sensors_2eproto();
void protobuf_AssignDesc_sensors_2eproto();
void protobuf_ShutdownFile_sensors_2eproto();

class Cam;

// ===================================================================

class Cam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensors.Cam) */ {
 public:
  Cam();
  virtual ~Cam();

  Cam(const Cam& from);

  inline Cam& operator=(const Cam& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Cam& default_instance();

  void Swap(Cam* other);

  // implements Message ----------------------------------------------

  inline Cam* New() const { return New(NULL); }

  Cam* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Cam& from);
  void MergeFrom(const Cam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Cam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 cols = 1;
  void clear_cols();
  static const int kColsFieldNumber = 1;
  ::google::protobuf::int32 cols() const;
  void set_cols(::google::protobuf::int32 value);

  // optional int32 rows = 2;
  void clear_rows();
  static const int kRowsFieldNumber = 2;
  ::google::protobuf::int32 rows() const;
  void set_rows(::google::protobuf::int32 value);

  // optional bytes image_data = 3;
  void clear_image_data();
  static const int kImageDataFieldNumber = 3;
  const ::std::string& image_data() const;
  void set_image_data(const ::std::string& value);
  void set_image_data(const char* value);
  void set_image_data(const void* value, size_t size);
  ::std::string* mutable_image_data();
  ::std::string* release_image_data();
  void set_allocated_image_data(::std::string* image_data);

  // optional double timestamp = 4;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  double timestamp() const;
  void set_timestamp(double value);

  // @@protoc_insertion_point(class_scope:sensors.Cam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 cols_;
  ::google::protobuf::int32 rows_;
  ::google::protobuf::internal::ArenaStringPtr image_data_;
  double timestamp_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_sensors_2eproto();
  friend void protobuf_AssignDesc_sensors_2eproto();
  friend void protobuf_ShutdownFile_sensors_2eproto();

  void InitAsDefaultInstance();
  static Cam* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Cam

// optional int32 cols = 1;
inline void Cam::clear_cols() {
  cols_ = 0;
}
inline ::google::protobuf::int32 Cam::cols() const {
  // @@protoc_insertion_point(field_get:sensors.Cam.cols)
  return cols_;
}
inline void Cam::set_cols(::google::protobuf::int32 value) {
  
  cols_ = value;
  // @@protoc_insertion_point(field_set:sensors.Cam.cols)
}

// optional int32 rows = 2;
inline void Cam::clear_rows() {
  rows_ = 0;
}
inline ::google::protobuf::int32 Cam::rows() const {
  // @@protoc_insertion_point(field_get:sensors.Cam.rows)
  return rows_;
}
inline void Cam::set_rows(::google::protobuf::int32 value) {
  
  rows_ = value;
  // @@protoc_insertion_point(field_set:sensors.Cam.rows)
}

// optional bytes image_data = 3;
inline void Cam::clear_image_data() {
  image_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cam::image_data() const {
  // @@protoc_insertion_point(field_get:sensors.Cam.image_data)
  return image_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cam::set_image_data(const ::std::string& value) {
  
  image_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sensors.Cam.image_data)
}
inline void Cam::set_image_data(const char* value) {
  
  image_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sensors.Cam.image_data)
}
inline void Cam::set_image_data(const void* value, size_t size) {
  
  image_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sensors.Cam.image_data)
}
inline ::std::string* Cam::mutable_image_data() {
  
  // @@protoc_insertion_point(field_mutable:sensors.Cam.image_data)
  return image_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cam::release_image_data() {
  // @@protoc_insertion_point(field_release:sensors.Cam.image_data)
  
  return image_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cam::set_allocated_image_data(::std::string* image_data) {
  if (image_data != NULL) {
    
  } else {
    
  }
  image_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_data);
  // @@protoc_insertion_point(field_set_allocated:sensors.Cam.image_data)
}

// optional double timestamp = 4;
inline void Cam::clear_timestamp() {
  timestamp_ = 0;
}
inline double Cam::timestamp() const {
  // @@protoc_insertion_point(field_get:sensors.Cam.timestamp)
  return timestamp_;
}
inline void Cam::set_timestamp(double value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:sensors.Cam.timestamp)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace sensors

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sensors_2eproto__INCLUDED
